"""
Django settings for zhigengBlog project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os, logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 把应用添加到INSTALLED_APPS中


MYDB = {
   'mysql': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'text',  # 你的数据库名称
        'USER': 'root',  # 你的数据库用户名
        'PASSWORD': '',  # 你的数据库密码
        'HOST': '',  # 你的数据库主机，留空默认为localhost
        'PORT': '3306',  # 你的数据库端口
     },
     'sqlite': {
         'ENGINE': 'django.db.backends.sqlite3',
         'NAME': os.path.join(BASE_DIR, 'db/db.sqlite3').replace('\\', '/'),
    }
}

#MYDB = {
#    'mysql': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': 'testdjango',  # 你的数据库名称
#        'USER': 'root',  # 你的数据库用户名
#        'PASSWORD': 'admin',  # 你的数据库密码
#        'HOST': '',  # 你的数据库主机，留空默认为localhost
 #       'PORT': '3306',  # 你的数据库端口
#    },
 #   'sqlite': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db/db.sqlite3').replace('\\', '/'),
 #   }
#}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'keopwksdsx(8!32s*ulr#j=qhh)1t%ci_d4rg1t88i((z^g*+7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'user',
    'Blog',
    'comment',
    'Login'
]
SITE_ID = 1

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': './debug.log',  # 输出日志到指定位置的文件中
#         },
#     },
#     'loggers': {
#         'django': {  # django框架的输出日志配置
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # verbose输出稍复杂信息，等级、日志、附加时间、进程号等等
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        # simple只输出日志级别和日志信息
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        # 只有在环境变量DEBUG等于False时才输出日志
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        # 直接输出级别为DEBUG(或更高)的信息到控制台，本handler使用名称为simple的format
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 使用AdminEmailHandler发送级别为ERROR(或更高)的信息到网站管理员邮箱，这个handler使用名称为special的过滤器
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false']
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': './debug.log',  # 输出日志到指定位置的文件中
        },
    },
    'loggers': {
        # 打印所有信息到名称为console的handler
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        # 传递ERROR级别的信息到名为mail_admins的handler
        # 另外的，该条记录器标示了如果使用本记录器处理日志，那么将不使用django处理
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,  ###
        },
        # 传递所有INFO级别(或更高)信息到名称为special的过滤器和两个handler
        # 这样就实现了如果是INFO级别的信息则打印到控制台，如果是ERROR或者CRITICAL级别的则通过email发送给管理员
        'myproject.custom': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'filters': ['require_debug_false']
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zhigengBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zhigengBlog.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': MYDB.get('mysql'),
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# STATIC_URL = '/static/'为静态文件别名
STATIC_URL = '/static/'
# 静态文件地址拼接，后面'static'文件为自己建立的存放静态文件（JS，IMG，CSS）的文件名
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),  # 主文件下静态文件
    # os.path.join(BASE_DIR, "Blog", "statics"),  # 项目blog文件下静态文件
)
